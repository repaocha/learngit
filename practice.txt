>>> cmp(1,2)
-1
>>> cmp(1,1)
0
>>> cmp(2,1)
1
>>> int('123')
123
>>> int('12.34')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: invalid literal for int() with base 10: '12.34'
>>> int(12.34)
12
>>> exit()

C:\Users\CW\work>python function.py

C:\Users\CW\work>2
'2' 不是内部或外部命令，也不是可运行的程序
或批处理文件。

C:\Users\CW\work>python function.py
  File "function.py", line 1
    def my_abs(10):
                ^
SyntaxError: invalid syntax

C:\Users\CW\work>python
Python 2.7.2 Stackless 3.1b3 060516 (default, Dec 21 2011, 17:08:51) [MSC v.1500 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> my_abs('A')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'my_abs' is not defined
>>> def my_abs(x):
... if x >=0:
  File "<stdin>", line 2
    if x >=0:
     ^
IndentationError: expected an indented block
>>> exit()

C:\Users\CW\work>my_abs(10)
'my_abs' 不是内部或外部命令，也不是可运行的程序
或批处理文件。

C:\Users\CW\work>python function.py
  File "function.py", line 1
    def my_abs(10):
                ^
SyntaxError: invalid syntax

C:\Users\CW\work>python function.py

C:\Users\CW\work>my_abs(10)
'my_abs' 不是内部或外部命令，也不是可运行的程序
或批处理文件。

C:\Users\CW\work>python
Python 2.7.2 Stackless 3.1b3 060516 (default, Dec 21 2011, 17:08:51) [MSC v.1500 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> def my_abs(x):
...     if x>=0:
...       return x
...     else:
...       return -x
...
>>> my_abs(10)
10
>>> my_abs(-10）
  File "<stdin>", line 1
    my_abs(-10）
              ^
SyntaxError: invalid syntax
>>> my_abs(-10)
10
>>> my_abs('A')
'A'
>>> abs('A')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: bad operand type for abs(): 'str'
>>> def my_abs(x):
...    if not isinstance(x,(int,float)):
...        raise TypeError('bad operand type')
...    if x>=0:
...        return x
...    else:
... return -x
  File "<stdin>", line 7
    return -x
    ^
IndentationError: expected an indented block
>>> def my_abs(x):
...     if not isinstance(x,(int,float)):
...        raise TypeError('bad operand type')
...     if x>=0:
...        return x
...     else:
...        return -x
...
>>> my_abs('A')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 3, in my_abs
TypeError: bad operand type
>>> my_abs(-100)
100
>>> my_abs(100)
100
>>> my_abs(12.34)
12.34
>>> import math
>>>
>>> def move(x,y,step,angle=0):
...     nx=x+step*math.cos(angle)
...     ny=y-step*math.sin(angle)
...     return nx,ny
... x,y=move(100,100,60,math.pi/6)
  File "<stdin>", line 5
    x,y=move(100,100,60,math.pi/6)
    ^
SyntaxError: invalid syntax
>>> x, y = move(100,100,60,math.pi/6)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'move' is not defined
>>> import math
>>>
>>> def move(x,y,step,angle=0):
...     nx=x+step*math.cos(angle)
...     ny=y-step*math.sin(angle)
...     return nx,ny
...
>>> x,y=move(100,100,60,math.pi / 6)
>>> print(x,y)
(151.96152422706632, 70.0)
>>> import math
>>>
>>> def move(x,y,step,angle=0):
...     nx=x+step*math.cos(angle)
...     ny=y-step*math.sin(angle)
...     return nx,ny
...
>>> x,y=move(100,100,60,math.pi/6)
>>> print(x,y)
(151.96152422706632, 70.0)
>>> x, y = move(100,100,60,math.pi/6)
>>> print(x,y)
(151.96152422706632, 70.0)
>>> x,y=move(100,100,60,math.pi/6)
>>> print(x,y)
(151.96152422706632, 70.0)
>>> r=move(100,100,60,math.pi/6)
>>> print(r)
(151.96152422706632, 70.0)
>>> impart math
  File "<stdin>", line 1
    impart math
              ^
SyntaxError: invalid syntax
>>>
>>> import math
>>>
>>> def quadratic(a,b,c):
...    a*x^2+b*x+c=0
...    return x
...
  File "<stdin>", line 2
SyntaxError: can't assign to operator
>>> import math
>>>
>>> def quadratic(a,b,c):
...     if not isinstance(a,(int,float)):
...        raise TypeError('a is not a number')
...     if not isinstance(b,(int,float)):
...        raise TypeError('b is not a number')
...     if not isinstance(c,(int,float)):
...        raise TypeError('c is not a number')
...     p=b*b-4*a*c
...     if p>=0 and a!=0:
...        x1=(b+math.sqrt(p))/(2*a)
...        x2=(-b-math.sqrt(p))/(2*a)
...        return x1,x2
...     else:
...        return('wrong number!')
...
>>> print(quadratic(2.3.1))
  File "<stdin>", line 1
    print(quadratic(2.3.1))
                        ^
SyntaxError: invalid syntax
>>> r=quadratic(2,3,1)
>>> print(r)
(1.0, -1.0)
>>> import math
>>> def quadratic(a,b,c):
...     if not isinstance(a,(int,float)):
...        raise TypeError('a is not a number')
...     if not isinstance(b,(int,float)):
...        raise TypeError('b is not a number')
...     if not isinstance(c,(int,float)):
...        raise TypeError('c is not a number')
...     p=b*b-4*a*c
...     if p>=0 and a!=0:
...        x1=(-b+math.sqrt(p))/(2*a)
...        x1=(-b-math.sqrt(p))/(2*a)
...     if p>=0 and a!=0:
...
  File "<stdin>", line 13

    ^
IndentationError: expected an indented block
>>> import math
>>> def quadratic(a,b,c):
...     if not isinstance(a,(int,float)):
...        raise TypeError('a is not a number')
...     if not isinstance(b,(int,float)):
...        raise TypeError('b is not a number')
...     if not isinstance(c,(int,float)):
...        raise TypeError('c is not a number')
...     p=b*b-4*a*c
...     if p>=0 and a!=0:
...        x1=(-b-math.sqrt(p))/(2*a)
...        x2=(-b+math.sqrt(p))/(2*a)
...        return x1,x2
...     else:
...        return('wrong number!')
...
>>> r=quadratic(2,3,1)
>>> print(r)
(-1.0, -0.5)
>>> import math
>>>
>>> def quadratic(a,b,c):
...     if not isinstance(a,(int,float)):
...        raise TypeError('a is not a number')
...     if not isinstance(b,(int,float)):
...        raise TypeError('b is not a number')
...     if not isinstance(c,(int,float)):
...        raise TypeError('c is not a number')
...     p=b*b-4*a*c
...     if p>=0 and a!=0:
...        x1=(-b+math.sqrt(p))/(2*a)
...        x2=(-b-math.sqrt(p))/(2*a)
...     else:
...        return('wrong number!')
...
>>> r=quadratic(2,3,1)
>>> print(r)
None
>>> import math
>>> def quadratic(a,b,c):
...     if not isinstance(a,(int,float)):
...        raise TypeError('a is not a number')
...     if not isinstance(b,(int,float)):
...        raise TypeError('b is not a number')
...     if not isinstance(c,(int,float)):
...        raise TypeError('c is not a number')
...     p=b*b-4*a*c
...     if p>=0 and a!=0:
...        x1=(-b+math.sqrt(p))/(2*a)
...        x2=(-b-math.sqrt(p))/(2*a)
...        return x1,x2
...     else:
...        return('wrong number!')
...
>>> r=quadratic(2,3,1)
>>> print(r)
(-0.5, -1.0)
>>> import math
>>> def quadratic(a,b,c):
...     if not isinstance(a,(int,float)):
...        raise TypeError('a is not a number')
...     if not isinstance(b,(int,float)):
...        raise TypeError('b is not a number')
...     if not isinstance(c,(int,float)):
...        raise TypeError('c is not a number')
...     p=b^2-4*a*c
...     if p>=0 and a!=0:
...        x1=(-b+math.sqrt(q))/(2*a)
...        x2=(-b-math.sqrt(q))/(2*a)
...        return x1,x2
...     else:
...        return('wrong number!')
...
>>> r=quadratic(2,3,1)
>>> print(r)
wrong number!
>>> def fact(n):
...     return fact_iter(n,1)
... def fact_iter(num,product):
  File "<stdin>", line 3
    def fact_iter(num,product):
      ^
SyntaxError: invalid syntax
>>> def move(n,a,b,c):
...     if n==1:
...        print(a,'-->',c)
...     else:
...        move(n-1,a,c,b)
...        move(1,a,b,c)
...        move(n-1,b,a,c)
... n=input('enter the number:')
  File "<stdin>", line 8
    n=input('enter the number:')
    ^
SyntaxError: invalid syntax
>>> def move(n,a,b,c):
...     if n==1:
...        print(a,'-->',c)
...     else:
...        move(n-1,a,c,b)
...        move(1,a,b,c)
...        move(n-1,b,a,c)
...        n=input('enter the number:')
...        move(int(n),'A','B','C'A)
  File "<stdin>", line 9
    move(int(n),'A','B','C'A)
                           ^
SyntaxError: invalid syntax
>>> def move(n,a,b,c):
...     if n==1:
...        print(a,'-->',c)
...     else:
...        move(n-1,a,c,b)
...        move(1,a,b,c)
...        move(n-1,b,a,c)
...        n=input('enter the number:')
...        move(int(n),'A','B','C')
...
>>> move(3,'A','B','C')
('A', '-->', 'C')
('A', '-->', 'B')
('C', '-->', 'B')
enter the number:3
('A', '-->', 'C')
('A', '-->', 'B')
('C', '-->', 'B')
enter the number:6
('A', '-->', 'B')
('A', '-->', 'C')
('B', '-->', 'C')
enter the number:SER
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 5, in move
  File "<stdin>", line 9, in move
  File "<stdin>", line 5, in move
  File "<stdin>", line 9, in move
  File "<stdin>", line 5, in move
  File "<stdin>", line 5, in move
  File "<stdin>", line 5, in move
  File "<stdin>", line 5, in move
  File "<stdin>", line 8, in move
  File "<string>", line 1, in <module>
NameError: name 'SER' is not defined
>>> def move(n,a,b,c):
...     if n==1:
...        print(a,'-->',c)
...     else:
...        move(n-1,a,c,b)
...        print(a,'-->',c)
...        move(n-1,b,a,c)
...
>>> move(3,a,b,c)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'a' is not defined
>>> move(3,'A','B','C')
('A', '-->', 'C')
('A', '-->', 'B')
('C', '-->', 'B')
('A', '-->', 'C')
('B', '-->', 'A')
('B', '-->', 'C')
('A', '-->', 'C')
>>> move(3,A,B,C)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'A' is not defined
>>> def move(n,a,b,c):
...     if n==1:
...        print('%s --> %s' %(a,c))
...     else:
...        move(n-1,a,c,b)
...        print('%s --> %s' %(a,c))
...        move(n-1,b,a,c)
...
>>> move(3,'A','B','C')
A --> C
A --> B
C --> B
A --> C
B --> A
B --> C
A --> C
>>> def move(n,a,b,c):
...     if n==1:
...        print('%s --> %s' %(a,c))
...     else:
...        move(n-1,a,c,b)
...        print('%s --> %s' %(a,c))
...        move(n-1,b,a,c)
...
>>> move(3,'a','b','c')
a --> c
a --> b
c --> b
a --> c
b --> a
b --> c
a --> c
>>> L=['yang','chen','yangchen','yangyang','yangyangya
ng']
>>> r=[]
>>> n=3
>>> for i in range(n):
...     r.append(L[i])
...
>>> r
['yang', 'chen', 'yangchen']
>>> r=()
>>> n=3
>>> for i in range(n):
...     r.append(L[i])
...
Traceback (most recent call last):
  File "<stdin>", line 2, in <module>
AttributeError: 'tuple' object has no attribute 'appen
d'
>>> L[0:3]
['yang', 'chen', 'yangchen']
>>> L[:3]
['yang', 'chen', 'yangchen']
>>> L[1:3]
['chen', 'yangchen']
>>> L[-2:]
['yangyang', 'yangyangyang']
>>> L=range(100)
>>> l
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'l' is not defined
>>> L
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 2
9, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,
 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 5
6, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 8
3, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96,
 97, 98, 99]
>>> L[1:19]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16
, 17, 18]
>>> L[-10:]
[90, 91, 92, 93, 94, 95, 96, 97, 98, 99]
>>> L[:10:2]
[0, 2, 4, 6, 8]
>>> L[::10]
[0, 10, 20, 30, 40, 50, 60, 70, 80, 90]
>>> L[:]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 2
9, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,
 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 5
6, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 8
3, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96,
 97, 98, 99]
>>> L=['ABCDEFGHIJK']
>>> L
['ABCDEFGHIJK']
>>> L[:5]
['ABCDEFGHIJK']
>>> L[::2]
['ABCDEFGHIJK']
>>> 'ABCDEFGHIJK'[:2]
'AB'
>>> L='ABCDEFGHIJK'
>>> L[:2]
'AB'
>>> d={'a':1,'b':2,'c':3}
>>> for key in d:
...     print key
...
a
c
b
>>> for ch in 'ABC':
...     print ch
...
A
B
C
>>> from collections import Iterable
>>> isintance('abc',Iterable)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'isintance' is not defined
>>> from collections import Iterable
>>> isinstance('abc',Iterable)
True
>>> isinstance([1,2,3],Iterable)
True
>>> isinstance(123,Iterable)
False
>>> for i, value in enumerate(['A','B','C']):
...     print i,value
...
0 A
1 B
2 C
>>> for i in('A','B','C'):
...
  File "<stdin>", line 2

    ^
IndentationError: expected an indented block
>>> for i in('A','B','C')
  File "<stdin>", line 1
    for i in('A','B','C')
                        ^
SyntaxError: invalid syntax
>>> for i in('A','B','C'):
...     print i
...
A
B
C
>>> for yang in('abcdefghijklmn):
  File "<stdin>", line 1
    for yang in('abcdefghijklmn):
                                ^
SyntaxError: EOL while scanning string literal
>>> for yang in('abcdefghijk'):
...    print yang
...
a
b
c
d
e
f
g
h
i
j
k
>>> for yangchen in('[1,2,3,4,5,6,7,8,9,0]'):
...     print yangchen
...
[
1
,
2
,
3
,
4
,
5
,
6
,
7
,
8
,
9
,
0
]
>>> for x,y in[(1,1),(2,2),(3,3)]:
...       print x,y
...
1 1
2 2
3 3
>>> for x,y in([1,1],[2,2],[3,3]):
...     print x,y
...
1 1
2 2
3 3

C:\Users\CW>python
Python 2.7.2 Stackless 3.1b3 060516 (default, Dec 21 2011, 17:08:51) [MSC v.1500 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> def cmp_ignore_case(s1,s2):
...     u1=s1.upper()
...     u2=s2.upper()
...     if u1<u2:
...        return -1
...     if u1>u2
  File "<stdin>", line 6
    if u1>u2
           ^
SyntaxError: invalid syntax
>>> def cmp_ignore_case(s1,s2):
...     u1=s1.upper()
...     u2=s2.upper()
...     if u1<u2:
...        return -1
...     if u1>u2:
...        return 1
...     return 0
...
>>> sorted(['Bob','about','Zoo','Credit'],cmp_ignore_case)
['about', 'Bob', 'Credit', 'Zoo']
>>> L=[('Bob',75),('Adam',92),('Bart',66),('Lisa',88)]
>>> def by_name(t):
...     return t[0].lower()
...
>>> L1=sorted(L,key=by_name)
>>> print(L1)
[('Adam', 92), ('Bart', 66), ('Bob', 75), ('Lisa', 88)]
>>> def cmp_ignore_case(s1,s2):
...     u1=s1.lower()
...     u2=s2.lower()
...     cmp(u1,u2)
...
>>> sorted(['Bob','about','Zoo','Credit'],cmp_ignore_case)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: comparison function must return int, not NoneType
>>> def by_scort(t):
...     return t[1]
...
>>> L=[('Bob',75),('Adam',92),('Bart',66),('Lisa',88)]
>>> def by_scort(t):
...     return t[1]
...
>>> L1=sorted(L,key=by_scort,reverse=True)
>>> print(L1)
[('Adam', 92), ('Lisa', 88), ('Bob', 75), ('Bart', 66)]
>>> L=[('Bob',75),('Adam',92),('Bart',66),('Lisa',88)]
>>> def by_scort(t):
...     return t[0]
...
>>> L1=sorted(L,key=by_scort,reverse=True)
>>>
>>> print(L1)
[('Lisa', 88), ('Bob', 75), ('Bart', 66), ('Adam', 92)]
>>> L=[('Bob',75),('Adam',92),('Bart',66),('Lisa',88)]
>>> def by_scort(t):
...     return t[0]
...
>>> L1=sorted(L,key=by_scort)
>>> print(L1)
[('Adam', 92), ('Bart', 66), ('Bob', 75), ('Lisa', 88)]
>>> L=[('Bob',75),('Adam',92),('Bart',66),('Lisa',88)]
>>> def by_scort():
...     return t[1]
...
>>> L1=sorted(L,key=by_scort)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: by_scort() takes no arguments (1 given)
>>> L=[('Bob',75),('Adam',92),('Bart',66),('Lisa',88)]
>>> def by_scort(t):
...     return t[1]
...
>>> L1=sorted(L,key=by_scort)
>>> print(L1)
[('Bart', 66), ('Bob', 75), ('Lisa', 88), ('Adam', 92)]
>>> L=[('Bob',75,99),('Adam',92,44),('Bart',66,90),('Lisa',88,88)]
>>> def by_english(t):
...     return t[2]
...
>>> L2=sorted(L,key=by_english,reverse=True)
>>> print(L2)
[('Bob', 75, 99), ('Bart', 66, 90), ('Lisa', 88, 88), ('Adam', 92, 44)]
>>> def lazy_sum(*args)
  File "<stdin>", line 1
    def lazy_sum(*args)
                      ^
SyntaxError: invalid syntax
>>> def lazy_sum(*args):
...     def sum():
...         ax=0
...         for n in args:
...             ax=ax+n
...         return ax
...     return sum
...
>>> f=lazy_sum(1,3,5,7,9)
>>> f
<function sum at 0x029E2030>
>>> f()
25
>>> list(map(lambda x:x*x,[1,2,3,4,5,6,7,8,9]))
[1, 4, 9, 16, 25, 36, 49, 64, 81]
>>> f=lambda x:x*x
>>> f(5)
25
>>> def f(x):
...     return x*x
...
>>> f(5)
25
>>> def build(x,y)
  File "<stdin>", line 1
    def build(x,y)
                 ^
SyntaxError: invalid syntax
>>> def build(x,y):
...     return lambda:x*x+y*y
...
>>> build(1,2)
<function <lambda> at 0x029E2070>
>>> def now():
...     print('2015-3-25')
...
>>> f=now
>>> f()
2015-3-25
>>> now._name_
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'function' object has no attribute '_name_'
>>> def now():
...     print('2015-3-25')
...
>>> now._name_
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'function' object has no attribute '_name_'
>>> f._name_
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'function' object has no attribute '_name_'
>>> def log(func):
...     def wrapper(*args,**kw):
...         print('call %s()' %func._name_)
...         return func(*args,**kw)
...     return wrapper
...
>>> @log
... def now():
...     print('2015-3-25')
...
>>> now()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 3, in wrapper
AttributeError: 'function' object has no attribute '_name_'
>>> def int2(x,base=2):
...     return int(x,base)
...
>>> int2('1000000')
64
>>> import functools
>>> int2=functools.partial(int,base=2)
>>> int2('1000000')
64
>>> int2('100000',base=10)
100000
>>> class Student(object):
...
  File "<stdin>", line 2

    ^
IndentationError: expected an indented block
>>> class Student(object):
...       def _init_(self,name,score):
...           self.name=name
...           self.score=score
...       def print_score(self):
...
  File "<stdin>", line 6

    ^
IndentationError: expected an indented block
>>> class Student(object):
... pass
  File "<stdin>", line 2
    pass
       ^
IndentationError: expected an indented block
>>> class Student(object):
...       pass
...
>>> bart=Student()
>>> bart
<__main__.Student object at 0x029E51B0>
>>> Student
<class '__main__.Student'>
>>> bart.name='bart simpson'
>>> bart.name
'bart simpson'
>>> class Student(object):
...    def _init_(self,name,score):
...        self.name=name
...        self.score=score
...
>>> bart=Student('Bart Simpson',59)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: object.__new__() takes no parameters
>>>    def _init_(self,name,score):
  File "<stdin>", line 1
    def _init_(self,name,score):
    ^
IndentationError: unexpected indent
>>> class Student(object):
...    def __init__(self,name,score):
...        self.name=name
...        self.score=score
...
>>> bart=Student('Bart Simpson',59)
>>> bart.name
'Bart Simpson'
>>> bart.score
59

>>> class Student(object):
...    def __init__(self,name,score):
...        self.name=name
...        self.score=score
...    def print_score(self):
...        print('%s:%s' % (self.name,self.score))
...    def get_grade(self):
...        if self.score>=90:
...           return 'A'
...        elif self.score>=60
  File "<stdin>", line 10
    elif self.score>=60
                      ^
SyntaxError: invalid syntax
>>> class Student(object):
...    def __init__(self,name,score):
...        self.name=name
...        self.score=score
...    def print_score(self):
...        print('%s:%s' % (self.name,self.score))
...    def get_grade(self):
...        if self.score>=90:
...           return 'A'
...        elif self.score>=60:
...           return 'B'
...        else:
...           return 'C'
...
>>> bart.get_grade()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'Student' object has no attribute 'g
et_grade'
>>> class Student(object):
...    def __init__(self,name,score):
...        self.name=name
...        self.score=score
...
>>> bart=Student('yangchen',99)
>>> bart.name
'yangchen'
>>> bart.score
99
>>> def print_score(std):
...     print '%s:%s' % (self.name,self.score)
...
>>> print_score(bart)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 2, in print_score
NameError: global name 'self' is not defined
>>> def print_score(std):
...     print '%s:%s' % (std.name,std.score)
...
>>> print print_score(bart)
yangchen:99
None
>>> print_score(bart)
yangchen:99
>>> print(print_score(bart))
yangchen:99
None
>>> def get_grade(self):
...     if self.score>=90:
...        return 'A'
...     elif aelf.score>=60:
...        return 'B'
...     else:
...        return 'C'
...
>>> bart.get_grade()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'Student' object has no attribute 'g
et_grade'
>>> class Student(object):
...     def get_grade(self):
...        if self.score>=90:
...           return 'A'
...        elif aelf.score>=60:
...           return 'B'
...        else:
...           return 'C'
...
>>> bart,get_grade()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: get_grade() takes exactly 1 argument (0 g
iven)
>>> calss Animal(object):
  File "<stdin>", line 1
    calss Animal(object):
               ^
SyntaxError: invalid syntax
>>> class Animal(object):
...     def run(self):
...       print('Animal is running.')
...
>>> animal=Animal()
>>> animal.run()
Animal is running.
>>> class Dog(self):
...     def run(self):
...     print ('Animal is running.')
  File "<stdin>", line 3
    print ('Animal is running.')
        ^
IndentationError: expected an indented block
>>> class Dog(Animal):
...    pass
...
>>> class Cat(Animal):
...    pass
...
>>> dog=Dog()
>>> dog.run()
Animal is running.
>>> cat=Cat()
>>> cat.run()
Animal is running.
>>> class Dog(Animal):
...   pass
... class Cat(Animal):
  File "<stdin>", line 3
    class Cat(Animal):
        ^
SyntaxError: invalid syntax
>>>  class Dog(Animal):
  File "<stdin>", line 1
    class Dog(Animal):
    ^
IndentationError: unexpected indent
>>>  class Dog(Animal):
  File "<stdin>", line 1
    class Dog(Animal):
    ^
IndentationError: unexpected indent
>>> class Animal(self):
...    def run():
...
  File "<stdin>", line 3

    ^
IndentationError: expected an indented block
>>> class Animal(object):
...    def run(self):
...      print('Animal is running.')
...
>>> class Dog(Animal):
...    def run(self):
...      print('Dog is running.')
...
>>> class Cat(Animal):
...        pass
...
>>> dog=Dog()
>>> dog.run()
Dog is running.
>>> cat=Cat()
>>> cat.run()
Animal is running.
>>> def run_twice():
...   animal.run()
...   animal.run()
...
>>> def run_twice(animal):
...   animal.run()
...   animal.run()
...
>>> run.twice(Animal())
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'run' is not defined
>>> class Animal(object):
...    def run(self):
...      print('animal is running.')
...
>>> class Dog(Animal):
...    def run(self):
...       print('dog is running.')
...
>>> class Cat(Animal):
...    def run(self):
...       print('cat is running.')
...
>>> def run_twice(Animal()):
  File "<stdin>", line 1
    def run_twice(Animal()):
                        ^
SyntaxError: invalid syntax
>>> def run_twice(animal()):
  File "<stdin>", line 1
    def run_twice(animal()):
                        ^
SyntaxError: invalid syntax
>>> def run_twice(animal):
...     animal.run()
...     animal.run()
...
>>> run_twice(Animal())
animal is running.
animal is running.
>>> def run_twice(Animal):
...     Animal.run()
...     Animal.run()
...
>>> run_twice(Animal())
animal is running.
animal is running.
>>> run_twice(Dog())
dog is running.
dog is running.
>>> run_twice(DOG())
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'DOG' is not defined
>>> run_twice(Dog())
dog is running.
dog is running.
>>> run_twice(Cat())
cat is running.
cat is running.
>>> class Tortoise(Animal):
...    def run(self):
...       print('Tortoise is running.')
...
>>> run_twice(Tortoise())
Tortoise is running.
Tortoise is running.
>>> type(abs)
<type 'builtin_function_or_method'>
>>> type(a)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'a' is not defined
>>> import types
>>> def fn():
...    pass
...  type(fn)
  File "<stdin>", line 3
    type(fn)
           ^
IndentationError: unindent does not match any outer
indentation level
>>> type(fn)=types.FuncetionType
  File "<stdin>", line 1
SyntaxError: can't assign to function call
>>> type(fn)=types.FunctionType
  File "<stdin>", line 1
SyntaxError: can't assign to function call
>>> import types
>>> def fn():
...   pass
...
>>> type(fn)=types.FunctionType
  File "<stdin>", line 1
SyntaxError: can't assign to function call
>>> ^X

C:\Users\CW>

C:\Users\CW>python
Python 2.7.2 Stackless 3.1b3 060516 (default, Dec 21
 2011, 17:08:51) [MSC v.1500 32 bit (Intel)] on win3
2
Type "help", "copyright", "credits" or "license" for
 more information.
>>> import types
>>> def fn():
...    pass
...
...
>>> type(fn)=types.FunctionType
  File "<stdin>", line 1
SyntaxError: can't assign to function call
>>> import types
>>> type('abc')==types.Stringtype
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'module' object has no attribute 'St
ringtype'
>>> type('abc')==types.StringType
True
>>> type(123)==types.IntType
True
>>> type(123)==types.intType
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'module' object has no attribute 'in
tType'
>>> type(123)==types.IntType
True

CW@H-PC MINGW64 ~
$ cd e:/learngit

CW@H-PC MINGW64 /e/learngit (master)
$ cat redme.txt
cat: redme.txt: No such file or directory

CW@H-PC MINGW64 /e/learngit (master)
$ cat readme.txt
Git is a distributed version control system.
Git is free software distributed under the GPL.
Git has a mutable index called stage.
Git tracks changes of files.
Creating a new branch is quick.
CW@H-PC MINGW64 /e/learngit (master)
$ git checkout -b dev
M       readme.txt
Switched to a new branch 'dev'

CW@H-PC MINGW64 /e/learngit (dev)
$ git branch
* dev
  master

CW@H-PC MINGW64 /e/learngit (dev)
$ git add readme.txt

CW@H-PC MINGW64 /e/learngit (dev)
$ git commit -m"branch test"
[dev 03c1132] branch test
 1 file changed, 3 insertions(+), 1 deletion(-)

CW@H-PC MINGW64 /e/learngit (dev)
$ git checkout master
Switched to branch 'master'
Your branch is up-to-date with 'origin/master'.

CW@H-PC MINGW64 /e/learngit (master)
$ git merge dev
Updating 313b5c2..03c1132
Fast-forward
 readme.txt | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

CW@H-PC MINGW64 /e/learngit (master)
$ git branch -d dev
Deleted branch dev (was 03c1132).

CW@H-PC MINGW64 /e/learngit (master)
$ git branch
* master

CW@H-PC MINGW64 /e/learngit (master)
$ git checkout -b feature1
Switched to a new branch 'feature1'

CW@H-PC MINGW64 /e/learngit (feature1)
$ git add readme.txt

CW@H-PC MINGW64 /e/learngit (feature1)
$ git commit -m"AND simple"
[feature1 630168f] AND simple
 1 file changed, 2 insertions(+), 1 deletion(-)

CW@H-PC MINGW64 /e/learngit (feature1)
$ git checkout master
Switched to branch 'master'
Your branch is ahead of 'origin/master' by 1 commit.
  (use "git push" to publish your local commits)

CW@H-PC MINGW64 /e/learngit (master)
$ git add readme.txt

CW@H-PC MINGW64 /e/learngit (master)
$ git commit -m"& simple"
[master bb58a31] & simple
 1 file changed, 2 insertions(+), 1 deletion(-)

CW@H-PC MINGW64 /e/learngit (master)
$ git merge feature1
Auto-merging readme.txt
CONFLICT (content): Merge conflict in readme.txt
Automatic merge failed; fix conflicts and then commit the result.

CW@H-PC MINGW64 /e/learngit (master|MERGING)
$ git status
On branch master
Your branch is ahead of 'origin/master' by 2 commits.
  (use "git push" to publish your local commits)
You have unmerged paths.
  (fix conflicts and run "git commit")

Unmerged paths:
  (use "git add <file>..." to mark resolution)

        both modified:   readme.txt

no changes added to commit (use "git add" and/or "git commit -a")

CW@H-PC MINGW64 /e/learngit (master|MERGING)
$ cat readme.txt
Git is a distributed version control system.
Git is free software distributed under the GPL.
Git has a mutable index called stage.
Git tracks changes of files.
Creating a new branch is quick.
Creating a new branch is quick.
<<<<<<< HEAD
Creating a new branch is quick &simple.
=======
Creating a new branch is quick AND simple.
>>>>>>> feature1

CW@H-PC MINGW64 /e/learngit (master|MERGING)
$ git add readme.txt

CW@H-PC MINGW64 /e/learngit (master|MERGING)
$ git commit -m"conflict fixed"
[master fd3d3ff] conflict fixed

CW@H-PC MINGW64 /e/learngit (master)
$ git log --graph --pretty=oneline --abbrev-commit
*   fd3d3ff conflict fixed
|\
| * 630168f AND simple
* | bb58a31 & simple
|/
* 03c1132 branch test
* 313b5c2 remove test.txt
* 1c81325 add test.txt
* d881232 git tracks changes of file
* 4473f3d git tracks changes”
* 04d3ba3 understand how stage works
* 0355955 append GPL
* a42e8eb add distributed
* 98d27e9 wrote a readme file

CW@H-PC MINGW64 /e/learngit (master)
$ git branch -d feature1
Deleted branch feature1 (was 630168f).

CW@H-PC MINGW64 /e/learngit (master)
$ git checkout -b dev
Switched to a new branch 'dev'

CW@H-PC MINGW64 /e/learngit (dev)
$ git add readme.txt

CW@H-PC MINGW64 /e/learngit (dev)
$ git commit -m"add merge"
[dev fbda8c9] add merge
 1 file changed, 7 deletions(-)

CW@H-PC MINGW64 /e/learngit (dev)
$ git checkout master
Switched to branch 'master'
Your branch is ahead of 'origin/master' by 4 commits.
  (use "git push" to publish your local commits)

CW@H-PC MINGW64 /e/learngit (master)
$ git merge --no-ff -m "merge with no-ff" dev
Merge made by the 'recursive' strategy.
 readme.txt | 7 -------
 1 file changed, 7 deletions(-)

CW@H-PC MINGW64 /e/learngit (master)
$ git log --graph --pretty=oneline --abbrev-commit
*   62c088c merge with no-ff
|\
| * fbda8c9 add merge
|/
*   fd3d3ff conflict fixed
|\
| * 630168f AND simple
* | bb58a31 & simple
|/
* 03c1132 branch test
* 313b5c2 remove test.txt
* 1c81325 add test.txt
* d881232 git tracks changes of file
* 4473f3d git tracks changes”
* 04d3ba3 understand how stage works
* 0355955 append GPL
* a42e8eb add distributed
* 98d27e9 wrote a readme file

CW@H-PC MINGW64 /e/learngit (master)
$ git remote
origin

CW@H-PC MINGW64 /e/learngit (master)
$ git remote -v
origin  git@github.com:repaocha/learngit.git (fetch)
origin  git@github.com:repaocha/learngit.git (push)

CW@H-PC MINGW64 /e/learngit (master)
$ git push origin master
Counting objects: 16, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (16/16), done.
Writing objects: 100% (16/16), 1.49 KiB | 0 bytes/s, done.
Total 16 (delta 6), reused 0 (delta 0)
remote: Resolving deltas: 100% (6/6), done.
To git@github.com:repaocha/learngit.git
   313b5c2..62c088c  master -> master

CW@H-PC MINGW64 /e/learngit (master)
$ git push origin dev
Total 0 (delta 0), reused 0 (delta 0)
To git@github.com:repaocha/learngit.git
 * [new branch]      dev -> dev

CW@H-PC MINGW64 /e/learngit (master)
$ git branch
  dev
* master

CW@H-PC MINGW64 /e/learngit (master)
$ git tag v1.0

CW@H-PC MINGW64 /e/learngit (master)
$ git tag
v1.0

CW@H-PC MINGW64 /e/learngit (master)
$ git log --pretty=oneline --abbrev-commit
62c088c merge with no-ff
fbda8c9 add merge
fd3d3ff conflict fixed
bb58a31 & simple
630168f AND simple
03c1132 branch test
313b5c2 remove test.txt
1c81325 add test.txt
d881232 git tracks changes of file
4473f3d git tracks changes”
04d3ba3 understand how stage works
0355955 append GPL
a42e8eb add distributed
98d27e9 wrote a readme file

CW@H-PC MINGW64 /e/learngit (master)
$ git tag v0.9 1c81325

CW@H-PC MINGW64 /e/learngit (master)
$ git tag
v0.9
v1.0

CW@H-PC MINGW64 /e/learngit (master)
$ git show v0.9
commit 1c8132591ec8669a798722195c58b007f0ba7d9d
Author: hanjiuzhou <jiuzhou.han@itnihao.com>
Date:   Mon Jul 3 14:03:51 2017 +0800

    add test.txt

diff --git a/test.txt b/test.txt
new file mode 100644
index 0000000..e69de29